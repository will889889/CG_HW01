// ADS Point lighting Shader
// Vertex Shader
// Richard S. Wright Jr.
// OpenGL SuperBible
#version 430

layout(location = 0) in vec3 vPosition;
layout(location = 1) in vec2 vertexUV;
layout(location = 2) in vec3 vertexNormal;
layout(location = 3) in vec3 instanceOffset;
layout(location = 4) in float yTime;

vec3 vLightPosition = vec3(0,10,50);

uniform MatVP{
	mat4 View;
	mat4 Projection;
};
uniform mat4 Model;

uniform float fTime;

// Wills
uniform int isBody = 0;
uniform mat4 DeformRotation;
float startHeight = 10.0f;
float endHeight = 38.0f;
float interval = 1.0f;

// Color to fragment program
out vec3 vVaryingNormal;
out vec3 vVaryingLightDir;
out vec2 UV;

void main(void) 
{ 
	mat4 MVP = Projection*View*Model;
	mat4 MV = View*Model;
	
    // Get surface normal in eye coordinates
	mat3 normalMatrix = mat3(MV);//normal matrix is MV matrix's 3*3 excluding 'w' 
    vVaryingNormal = normalMatrix * vertexNormal;

	// Will - deform model
	vec4 vPosDeformed = vec4(vPosition,1);
	if(isBody == 0 && vPosition.y > startHeight)
	{
		int level = int(ceil(vPosition.y - startHeight));
		if(vPosition.y >= endHeight)
		{
			level = int(ceil(endHeight));
		}
		vec4 deformPos = vec4(0,interval,0,1);
		for(int i = 1; i < level; i++)
		{
			deformPos = DeformRotation * deformPos;
			deformPos += vec4(0, interval, 0, 0);
		}
		deformPos += vec4(0, startHeight, 0, 0);

		vPosDeformed = vPosDeformed - vec4(0, interval * level - 1 + startHeight, 0, 1);

		for(int i = 0; i < level; i++)
		{
			vPosDeformed = DeformRotation * vPosDeformed;
		}
		vPosDeformed = deformPos + vPosDeformed;
	}

    // Get vertex position in eye coordinates
    vec4 vPosition4 = MV * vec4(vPosition, 1);
	vec3 vPosition3 = vPosition4.xyz / vPosition4.w;

    // Get vector to light source
    vVaryingLightDir = normalize(vLightPosition - vPosition3);

	UV = vertexUV;

    // Don't forget to transform the geometry!

    gl_Position = (MVP * (vec4(vPosition,1) + vec4(instanceOffset.x * yTime, 200.0f * sin(yTime), instanceOffset.z * yTime, 0)));
}
